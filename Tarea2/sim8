lista_info_sim_base = []  #Lista para guardar la informacion de la simulacion base.
# Parámetros de entrada
media_llegada_barcos = 1.25     # tiempos en dias
tiempo_descarga_minimo = 0.5
tiempo_descarga_maximo = 1.5

# Variables de modelamiento
env = simpy.Environment()        # ambiente de simulación
amarres = simpy.Resource(env, capacity=2)                   # se instancian los 2 amarres disponibles
gruas = simpy.PriorityResource(env, capacity=2)             # se instancian las 2 grúas disponibles con prioridad
barcos_en_puerto = 0             # variable contadora de barcos en el puerto   
tiempo_total_en_puerto = 0          # variable acumuladora de tiempo en el puerto
utilizacion_amarres = [0, 0]        # variable acumuladora de utilización de amarres    
utilizacion_gruas = [0, 0]              # variable acumuladora de utilización de grúas
gruas_disponibles = [True, True]        # variable que indica si las grúas están disponibles o no
tiempo_descarga_por_barco = []          # variable que almacena el tiempo de descarga de cada barco

# Generador de llegada de barcos
def llegada_de_barcos(env):             
    global barcos_en_puerto             
    while True:
        yield env.timeout(random.expovariate(media_llegada_barcos)) # tiempo entre llegadas de barcos
        barcos_en_puerto += 1                                 # se aumenta el contador de barcos en el puerto
        env.process(descargar_barcos(env))                  # se inicia el proceso de descarga de barcos

# Proceso de descarga de barcos
def descargar_barcos(env):
    global barcos_en_puerto, tiempo_total_en_puerto, gruas_disponibles

    with amarres.request() as amarre:     # se solicita un amarre
        if not (gruas_disponibles[0] and gruas_disponibles[1]): # si no hay grúas disponibles
            tiempo_descarga = random.uniform(tiempo_descarga_minimo, tiempo_descarga_maximo) * 2    # se duplica el tiempo de descarga          
        elif barcos_en_puerto == 1:                             # si es el único barco en el puerto     
            tiempo_descarga = random.uniform(tiempo_descarga_minimo, tiempo_descarga_maximo) / 2    # se reduce a la mitad el tiempo de descarga
        else:                                                   # si hay grúas disponibles y hay más de un barco en el puerto
            tiempo_descarga = random.uniform(tiempo_descarga_minimo, tiempo_descarga_maximo)        # generar el tiempo de descarga

        yield amarre
        utilizacion_amarres[amarres.capacity - amarres.count] += env.now    # se acumula el tiempo de utilización de los amarres

        if gruas_disponibles[0]:    # se selecciona la grúa disponible con menor índice
            grua_index = 0      # se selecciona la grúa 0
        else:                       # si la grúa 0 no está disponible                           
            grua_index = 1      # se selecciona la grúa 1          

        with gruas.request(priority=grua_index) as grua:        # se solicita la grúa seleccionada
            gruas_disponibles[grua_index] = False            # se indica que la grúa seleccionada no está disponible      
            yield grua                                    # se espera a que la grúa seleccionada esté disponible

            inicio_descarga = env.now   # se almacena el tiempo de inicio de descarga                                 
            yield env.timeout(tiempo_descarga)  # se espera a que termine la descarga
            fin_descarga = env.now      # se almacena el tiempo de fin de descarga

            gruas_disponibles[grua_index] = True    # se indica que la grúa seleccionada está disponible
            utilizacion_amarres[amarres.capacity - amarres.count] -= env.now   # se acumula el tiempo de utilización de los amarres
            utilizacion_gruas[gruas.capacity - gruas.count] += fin_descarga - inicio_descarga   # se acumula el tiempo de utilización de las grúas

            barcos_en_puerto -= 1   # se disminuye el contador de barcos en el puerto
            tiempo_total_en_puerto += tiempo_descarga   # se acumula el tiempo de descarga
            tiempo_descarga_por_barco.append(tiempo_descarga)   # se almacena el tiempo de descarga del barco   

# Ejecutar la simulación
lista_resultados_actual = []
env.process(llegada_de_barcos(env))     # se inicia ela simulacion
env.run(until=90)                       # se ejecuta la simulacion por 90 dias
    
# Calcular medidas de desempeño
tiempo_promedio_en_puerto = tiempo_total_en_puerto / len(tiempo_descarga_por_barco)

if barcos_en_puerto > 0:
        tiempo_minimo_en_puerto = max(min(tiempo_descarga_por_barco), 0)
        tiempo_maximo_en_puerto = max(max(tiempo_descarga_por_barco), 0)
else:
        tiempo_minimo_en_puerto = 0
        tiempo_maximo_en_puerto = 0

utilizacion_total_amarres = 100 - (100*(round((sum(utilizacion_amarres) / (90 * 24)),4)))
utilizacion_total_gruas = 100 - (100*(round((sum(utilizacion_gruas) / (90 * 24)),4)))
    
lista_resultados_actual.append(tiempo_minimo_en_puerto)
lista_resultados_actual.append(tiempo_maximo_en_puerto)
lista_resultados_actual.append(tiempo_promedio_en_puerto)
lista_resultados_actual.append(utilizacion_total_amarres)
lista_resultados_actual.append(utilizacion_total_gruas)
    
    # Presentar los resultados
resultados = [
        ["Tiempo mínimo en el puerto:", str(tiempo_minimo_en_puerto)+" dias"  ],
        ["Tiempo máximo en el puerto:", str(tiempo_maximo_en_puerto)+" dias" ],
        ["Tiempo promedio en el puerto:", str(tiempo_promedio_en_puerto)+" dias" ],
        ["---------------------------------------", "----------------------"],
        ["Utilización de amarres (%):", str(utilizacion_total_amarres) + "  %"],
        ["Utilización de grúas (%):", str(utilizacion_total_gruas) + "  %"]
    ]

headers = ["Resultado", "Valor"]

df = pd.DataFrame(resultados, columns=headers)

table = tabulate(df, headers='keys', tablefmt='pretty', showindex=False)

print("\033[1m" + table + "\033[0m")

lista_info_sim_base.append(lista_resultados_actual)


print("El tiempo estimado de Utilización de amarres es de: " + str(sum([lista_info_sim_base[i][3]for i in range (len(lista_info_sim_base))])/len(lista_info_sim_base))  + " %")
print("El tiempo estimado de Utilización de gruas es de: " + str(sum([lista_info_sim_base[i][4]for i in range (len(lista_info_sim_base))])/len(lista_info_sim_base))  + " %\n")
print("Se ha hecho la simulación " +str(len(lista_info_sim_base))+" veces")
#for i in range(len(lista_info_sim_base)):
#    print(lista_info_sim_base[i])
